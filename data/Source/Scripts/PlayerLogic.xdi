<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text><![CDATA[import(traktor)

#using \{BFFAA983-A517-482D-9829-F2A5ED75E8B7}
#using \{7DB51529-FCBA-4AB2-86C7-876BDE110462}
#using \{3AA30C45-E8CF-4419-9FD6-1660CF56127C}

PlayerLogic = PlayerLogic or class("PlayerLogic")

-- Construct logic for participant.
function PlayerLogic:new(gameContext, index, resetOffset, inputStates, autoDrive, maxVelocity)
	self._gameContext = gameContext
	self._index = index
	self._t = 0
	self._lap = 0
	self._kph = 0
	self._offlimit = 0
	self._resetOffset = resetOffset
	self._inputStates = inputStates
	self._autoDrive = autoDrive
	self._pid = PID(0.8, 0.01, 0.2)
	self._pickup = nil
	self._lanePosition = 0
	self._engineBoost = 1
	self._engineBoostTarget = 1
	self._maxVelocity = maxVelocity

	local pt < const > = gameContext:getRoad():getComponent(world.PathComponent)
	local ln < const > = pt:estimateLength()
	self._pathLength = ln	

	self._botLookAhead = math.random() * 10 + 40
end

-- Update logic for participant.
function PlayerLogic:update(stage, info, throttleFactor)

	local road < const > = self._gameContext:getRoad()
	local kart < const > = self._gameContext:getKart(self._index)

	-- Get components which we need information from.
	local vc < const > = kart:getComponent(physics.VehicleComponent)
	local rb < const > = kart:getComponent(physics.RigidBodyComponent)
	local sc < const > = kart:getComponent(world.ScriptComponent)
	local pt < const > = road:getComponent(world.PathComponent)

	local position < const > = kart.transform.translation
	local direction < const > = kart.transform.axisZ

	local t = pt:findClosest(position)

	rb.body.active = true
	rb.body.enable = true

	-- Filter and apply engine boost.
	local k < const > = info.simulationDeltaTime * 0.1
	self._engineBoost = self._engineBoost * (1 - k) + self._engineBoostTarget * k
	vc.maxVelocity = self._maxVelocity * self._engineBoost

	-- Update input.
	if not self._autoDrive then
		vc.steerAngle = self._inputStates.steer:getValue()
		vc.engineThrottle = self._inputStates.throttle:getValue() * throttleFactor

		-- Trigger pickup.
		if self._inputStates.action:isPressed() then
			if self._pickup ~= nil then
				print("TRIGGER PICKUP")
				self._pickup = nil
			end
		end
	end

	-- Draw velocity compared to wheel direction.
	if stage.debug ~= nil then
		local Tbody < const > = rb.body.transform
		for i = 0, 3 do
			local w < const > = vc.wheels:get(i)
			local v < const > = rb.body:getVelocityAt(Tbody * w.center, false):normalized()

			stage.debug:line(
				Tbody * w.center,
				Tbody * (w.center + w.direction * 2),
				1, Color4f(1, 1, 1, 1)
			)

			stage.debug:line(
				Tbody * w.center,
				Tbody * w.center + v * 2,
				1, Color4f(1, 0, 0, 1)
			)
		end
	end

	-- Calculate speed.
	local mps < const > = rb.body.linearVelocity.length
	self._kph = mps * (60 * 60) / 1000

	-- Evaluate progress.
	if self._t > 0.9 and t < 0.1 then
		self._lap = self._lap + 1
	elseif self._t < 0.1 and t > 0.9 then
		self._lap = self._lap - 1
	end
	self._t = t

	-- Try and grab pickups.
	self._gameContext:forEachPickup(function(pickup)
		local psc < const > = pickup:getComponent(world.ScriptComponent)
		if psc ~= nil and psc:tryGrab(position) then
			self._pickup = pickup
		end
	end)

	-- Check limits.
	local Tmin < const > = pt:evaluateDirectional(t)
	local dx < const > = math.abs(Vector4.dot(Tmin.axisX, Tmin.translation - position))
	local dy < const > = Vector4.dot(Tmin.axisY, Tmin.translation - position)
	local upd < const > = rb.body.transform.axisY.y < 0
	if dx > 14 or dy > 2 or upd then
		self._offlimit = self._offlimit + info.simulationDeltaTime
		if self._offlimit > 2 then
			sc:teleport(Tmin * Transform(self._resetOffset, Quaternion.identity))
			self._pid:reset()
		end
	else
		self._offlimit = 0
	end
	self._lanePosition = Vector4.dot(Tmin.axisX, Tmin.translation - position) / 14

	-- Update auto drive.
	if self._autoDrive then

		-- Determine road turning.
		local T0 < const > = pt:evaluateDirectional(t)
		local T1 < const > = T0:inverse() * pt:evaluateDirectional(t + self._botLookAhead / self._pathLength)
		local turning < const > = T1.translation.x / T1.translation.z

		-- Road offset in object space.
		local offset = Vector4(
			math.clamp(turning * 4, -1, 1) * 10,
			0,
			0
		)

		-- Try and avoid other karts.
		self._gameContext:queryKarts(
			position,
			direction,
			0,
			30,
			function (other, _)
				if self._lanePosition > 0 then
					offset = offset - Vector4(3, 0, 0, 0)
				else
					offset = offset + Vector4(3, 0, 0, 0)
				end
				if stage.debug ~= nil then
					stage.debug:line(position, other.transform.translation, 3, Color4f(1, 0, 0, 1))
				end
			end
		)

		local Toptimal < const > = pt:evaluateDirectional(t + 20 / self._pathLength) * Transform(offset, Quaternion.identity)

		local Vdir < const > = (Toptimal.translation - position).xyz0
		local VdirLocal < const > = kart.transform:inverse():transform(Vdir)
	
		local angle = math.atan(VdirLocal.x, VdirLocal.z) * 0.8
		local a < const > = self._pid:evaluate(info.simulationDeltaTime, angle, 0)
		angle = math.clamp(a, -0.3, 0.3)
	
		local tf < const > = math.clamp(math.abs(turning) * 2, 0, 1)
		vc.steerAngle = angle
		vc.engineThrottle = (0.8 - tf * 0.2) * throttleFactor

		if stage.debug ~= nil then
			local Toptimal2 < const > = pt:evaluateDirectional(t + 10 / self._pathLength) * Transform(offset, Quaternion.identity)
			stage.debug:point(Toptimal.translation, 8, Color4f(0, 1, 0, 1))
			stage.debug:point(Toptimal2.translation, 8, Color4f(1, 1, 0, 1))
			stage.debug:line(position, Toptimal.translation, 1, Color4f(0, 1, 1, 1))
		end
	end
end

-- Check if player controlled.
function PlayerLogic:isPlayerControlled()
	return not self._autoDrive
end

-- Get player's speed in km/h.
function PlayerLogic:getSpeed()
	return math.floor(self._kph)
end

-- Get player's current lap, 1 based to suite user interface.
function PlayerLogic:getLap()
	return math.max(self._lap, 0) + 1
end

-- Get the player's position in the race, can be used to compare
-- position to other players.
function PlayerLogic:getPosition()
	return self._lap + self._t
end

--
function PlayerLogic:getLanePosition()
	return self._lanePosition
end

-- Set automatic drive.
function PlayerLogic:setAutoDrive(autoDrive)
	self._autoDrive = autoDrive
	self._pid:reset()
end

--
function PlayerLogic:setEngineBoost(engineBoost)
	self._engineBoostTarget = engineBoost
end
	]]></text>
</object>
