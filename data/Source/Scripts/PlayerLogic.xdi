<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
import(traktor)

PlayerLogic = PlayerLogic or class("PlayerLogic")

function PlayerLogic:new(kart, road, pickups, resetOffset, inputStates)
	self._kart = kart
	self._road = road
	self._pickups = pickups
	self._pickup = nil
	self._t = 0
	self._lap = 0
	self._kph = 0
	self._offlimit = 0
	self._resetOffset = resetOffset
	self._inputStates = inputStates
end

function PlayerLogic:update(info, throttleFactor)
	local vc < const > = self._kart:getComponent(physics.VehicleComponent)
	local rb < const > = self._kart:getComponent(physics.RigidBodyComponent)
	local pt < const > = self._road:getComponent(world.PathComponent)
	local position < const > = self._kart.transform.translation
	local t = pt:findClosest(position)

	rb.body.active = true
	rb.body.enable = true

	-- Update input.
	vc.steerAngle = self._inputStates.steer:getValue()
	vc.engineThrottle = self._inputStates.throttle:getValue() * throttleFactor

	if self._inputStates.action:isPressed() then
		-- Trigger pickup.
		if self._pickup ~= nil then
			print("TRIGGER PICKUP")
			self._pickup = nil
		end
	end

	-- Calculate speed.
	local mps = rb.body.linearVelocity.length
	self._kph = mps * (60 * 60) / 1000

	-- Evaluate progress.
	if self._t > 0.9 and t < 0.1 then
		self._lap = self._lap + 1
	elseif self._t < 0.1 and t > 0.9 then
		self._lap = self._lap - 1
	end
	self._t = t

	-- Check pickups.
	for i = 0, self._pickups.size - 1 do
		local p < const > = self._pickups:get(i)
		local psc < const > = p:getComponent(world.ScriptComponent)
		if psc ~= nil and psc:tryGrab(position) then
			self._pickup = p
			break
		end
	end

	-- Check limits.
	local Tmin = pt:evaluateDirectional(t)
	local dx = math.abs(Vector4.dot(Tmin.axisX, Tmin.translation - position))
	local dy = Vector4.dot(Tmin.axisY, Tmin.translation - position)
	if dx > 14 or dy > 2 then
		self._offlimit = self._offlimit + info.simulationDeltaTime
		if self._offlimit > 2 then
			local sc < const > = self._kart:getComponent(world.ScriptComponent)
			sc:teleport(Tmin * Transform(self._resetOffset, Quaternion.identity))
		end
	else
		self._offlimit = 0
	end

	-- Calculate optimal tracking transform.
	self._Toptimal = pt:evaluateDirectional(t + 0.004)
end

-- Get player's speed in km/h.
function PlayerLogic:getSpeed()
	return math.floor(self._kph)
end

-- Get player's current lap, 1 based to suite user interface.
function PlayerLogic:getLap()
	return math.max(self._lap, 0) + 1
end

-- Get the player's position in the race, can be used to compare
-- position to other players.
function PlayerLogic:getPosition()
	return self._lap + self._t
end

	]]>
	</text>
</object>
