<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{720C0A68-B608-2F40-8EBA-F7E42EB27F61}
#using \{FC4400A2-BDB6-BA45-9A22-12B9676E71FA}
#using \{97B60D98-6C09-7743-ADBC-16D2565DEDAD}
#using \{7DB51529-FCBA-4AB2-86C7-876BDE110462}
#using \{A348F9B0-E137-B24F-B5DC-6591E60A61DD}
#using \{B3773DDC-1FE6-D54B-9677-2CAB45912BA0}
#using \{FC207928-47BE-4597-9313-A7CD676CE810}
#using \{1DC37C6A-0C0C-A546-825E-B8F6E6088209}
#using \{BA98AF26-0814-7443-9CED-0EAA206BCF0C}
#using \{862D5F23-6E73-4FD2-933F-9C659B62BADB}

import(traktor)

local function iif(c, f, t)
	if not c then return f end; return t
end

-- Game

Game = Game or class("Game", Stage)

function Game:new(params, environment)
	Stage.new(self, params, environment)

	self._params = params
	self._inputMapping = environment.input.inputMapping
	self._singlePlayer = isa(self.world, runtime.WorldLayer)

	-- Initialize UiKit.
	Widget.initialize(
		environment.resource.resourceManager,
		{ "\{43489F5B-5785-1249-A7BA-CB5259C3F064}", "\{27DDC0FD-39DE-0946-BB1B-7D84A001C522}", "\{5ABEAE05-EB26-934F-932F-7F3C7C582383}" }
	)

	-- Create frame.
	self._frame = Frame(
		self.spark.root,
		1280, 720,
		FloodLayout(0, 0)
	)
	self._frame:update()

	self._flipBook = Flipboard(self._frame)
	self._countDownView = CountDownView(self._flipBook)
	self._finishedView = FinishedView(self._flipBook)
	self._pauseView = PauseView(self._flipBook)
		:setOnContinue(function() self:_resume() end)
		:setOnExit(function() self:_exit() end)

	if self._singlePlayer then
		self._hudView = HudSingleView(self._flipBook)
	else
		self._hudView = HudView(self._flipBook)
	end

	self._flipBook:showPage("COUNTDOWN")

	-- Ensure frame is properly layed out.
	self._frame:layout()

	local world < const > = self.world.world

	-- Create game context
	self._gameContext = GameContext(
		world:getEntity("Road"),
		world:getEntities("Kart"),
		world:getEntities("Pickup")
	)

	-- Setup difficulty.
	self._gameContext:forEachKart(function (kart, index)
		local vc = kart:getComponent(physics.VehicleComponent)
		if self._params._difficulty == 0 then
			print("EASY")
			vc.maxVelocity = 20
		elseif self._params._difficulty == 1 then
			print("NORMAL")
			vc.maxVelocity = 30
		else
			print("DIFFICULT")
			vc.maxVelocity = 50
		end
	end)

	-- Create camera handlers.
	local camera = world:getEntity("Camera0")
	self._followCamera0 = FollowCamera(camera, self._gameContext:getKart(0))
	local camera = world:getEntity("Camera1")
	self._followCamera1 = FollowCamera(camera, self._gameContext:getKart(1))

	-- Game logic.
	self._logic = {}
	self._gameContext:forEachKart(function (kart, index)

		local bot = false
		if self._singlePlayer and (index > 0) then bot = true end
		if not self._singlePlayer and (index > 1) then bot = true end

		local logic < const > = PlayerLogic(
			self._gameContext,
			index,
			Vector4(-4 + (index & 1) * 8, 1, 0),
			{
				steer = environment.input.inputMapping:getState("STATE_STEER_" .. index),
				throttle = environment.input.inputMapping:getState("STATE_THROTTLE_" .. index),
				action = environment.input.inputMapping:getState("STATE_ACTION_" .. index)
			},
			bot
		)

		table.insert(self._logic, logic)
	end)

	-- Set game state.
	self._updateFn = Game._updateStart
end

function Game:finalize()
end

function Game:update(info)
	local paused < const > = self:_updatePause(info)
	if not paused and self._updateFn ~= nil then
		self:_updateFn(info)
	end
	Tween.update(info.simulationDeltaTime)
end

function Game:postUpdate(info)
	local dT < const > = info.simulationDeltaTime
	self._followCamera0:update(dT)
	self._followCamera1:update(dT)
end

-- private

function Game:_pause()
	self._flipBook:showPage("PAUSE")
	environment.control.pause = true
end

function Game:_resume()
	self._flipBook:showPage("HUD")
	environment.control.pause = false
end

function Game:_exit()
	-- Ensure game isn't paused.
	environment.control.pause = false

	-- Load stage.
	local params = { load = "FRONTEND" }
	local nxt = self:loadStage("LOADING", params)
	self:gotoStage(nxt)
end

function Game:_updatePause(info)
	if not environment.control.pause then
		local escape < const > = self._inputMapping:isStatePressed("STATE_ESCAPE")
		if escape then
			self:_pause()
			return true
		end
		return false
	else
		return true
	end
end

function Game:_updateStart(info)
	-- Update kart logic.
	for _, logic in ipairs(self._logic) do
		logic:update(self, info, 0)
	end

	if info.stateTime < 2 then
		self._countDownView:setText(CountDownView.READY)
	elseif info.stateTime < 4 then
		self._countDownView:setText(CountDownView.SET)
	else
		self._countDownView:setText(CountDownView.GO)
		self._updateFn = Game._updateKickOff
		self._flipBook:showPage("HUD")
	end
end

function Game:_updateKickOff(info)
	self:_updateKartBoost(0)
	self:_updateUI()

	-- Update kart logic.
	for _, logic in ipairs(self._logic) do
		logic:update(self, info, 1)
	end

	if info.stateTime >= 6 then
		self._updateFn = Game._updateRace
	end
end

function Game:_updateRace(info)
	self:_updateKartBoost(1)
	self:_updateUI()

	-- Update kart logic.
	for _, logic in ipairs(self._logic) do
		logic:update(self, info, 1)
	end

	-- Check if any has finished.
	local anyFinished = false
	for _, logic in ipairs(self._logic) do
		if logic:getLap() > 3 then
			anyFinished = true
			break
		end
	end
	if anyFinished then
		for _, logic in ipairs(self._logic) do
			logic:setAutoDrive(true)
		end
		self._updateFn = Game._updateFinished
		self._flipBook:showPage("FINISHED")
	end
end

function Game:_updateFinished(info)
	self:_updateKartBoost(0)

	-- Update kart logic.
	for _, logic in ipairs(self._logic) do
		logic:update(self, info, 1)
	end

	local confirm < const > = self._inputMapping:isStatePressed("STATE_CONFIRM")
	if confirm then
		self:_exit()
	end
end

function Game:_updateUI()
	-- Left kart
	local playerView = self._hudView:getPlayerView0()
	if playerView ~= nil then
		playerView:setSpeed(self._logic[1]:getSpeed())
		playerView:setLap(self._logic[1]:getLap())
	end

	-- Right kart
	local playerView = self._hudView:getPlayerView1()
	if playerView ~= nil then
		playerView:setSpeed(self._logic[2]:getSpeed())
		playerView:setLap(self._logic[2]:getLap())
	end

	-- Update kart positions.
	local kp0 = self._logic[1]:getPosition() / 3
	local kp1 = self._logic[2]:getPosition() / 3
	self._hudView:setPositions(kp0, kp1)
end

function Game:_updateKartBoost(boostFactor)
--[[
	local world < const > = self.world.world

	local D < const > = 0.02
	local B < const > = 0.5
	
	local p0 < const > = self._logic0:getPosition()
	local p1 < const > = self._logic1:getPosition()
	local diff = p0 - p1

	-- Left Kart
	local kart = world:getEntity("Kart0")
	local vc = kart:getComponent(physics.VehicleComponent)
	if diff < -D then
		vc.engineBoost = B * boostFactor
	else
		vc.engineBoost = 0
	end

	-- Right Kart
	local kart = world:getEntity("Kart1")
	local vc = kart:getComponent(physics.VehicleComponent)
	if diff > D then
		vc.engineBoost = B * boostFactor
	else
		vc.engineBoost = 0
	end
]]
end
	]]>
	</text>
</object>
